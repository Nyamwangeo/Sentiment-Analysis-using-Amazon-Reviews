# -*- coding: utf-8 -*-
"""Sentiment Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S_J-ceI-QeSW0yYgeKgcCvMqOouZ2AN_
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
plt.style.use('ggplot')

import nltk

df = pd.read_csv(r"/Reviews.csv", nrows=500)

df.head()

df["Text"].values[1]

df.shape

df = df.head(500)

df.shape

"""# Exploratory Data Analysis"""

df["Score"].value_counts().sort_index()

score_counts = df['Score'].value_counts().sort_index()

# Plotting the bar chart
score_counts.plot(kind='bar', figsize = (10, 7))

# Adding labels and title
plt.xlabel('Rating Score')
plt.ylabel('Frequency')
plt.title('Count of Reviews by Rating Score')

# Display the plot
plt.show()

# Basic NLTK Example
example = df["Text"][55]
example

import nltk
nltk.download('punkt')

tokens = nltk.word_tokenize(example)
tokens[:10]

nltk.download('averaged_perceptron_tagger')

nltk.download('maxent_ne_chunker')

tagged = nltk.pos_tag(tokens)
tagged[:10]

nltk.download('words')

entities = nltk.chunk.ne_chunk(tagged)
# entities.pprint()

"""# Step 1 Vader Sentinent Scoring"""

from nltk.sentiment import SentimentIntensityAnalyzer
from tqdm.notebook import tqdm

nltk.download('vader_lexicon')

sia = SentimentIntensityAnalyzer()

sia

sia.polarity_scores("What the hell is with this product. Performed horribly")

sia.polarity_scores("This is excellent, I love it")

sia.polarity_scores(example)

"""#Run the polarity Score on the entire data set"""

res = {}
for i, row in tqdm(df.iterrows(), total=len(df)):
    text = row["Text"]
    myid = row["Id"]
    res[myid] = sia.polarity_scores(text)

vaders = pd.DataFrame(res).T
vaders = vaders.reset_index().rename(columns={'index': 'Id'})
vaders = vaders.merge(df, how='left')
vaders.head()

"""## Vader Plots"""

ax = sns.barplot(data=vaders, x='Score', y ='compound')
ax.set_title("Compound Score by Amazon Star Reviews")
plt.show

fig, axs = plt.subplots(1, 3, figsize=(15,5))
sns.barplot(data=vaders, x="Score", y="pos", ax=axs[0])
sns.barplot(data=vaders, x="Score", y="neg", ax=axs[1])
sns.barplot(data=vaders, x="Score", y="neu", ax=axs[2])
axs[0].set_title("Positive")
axs[1].set_title("Negative")
axs[2].set_title("Neutral")
plt.tight_layout()
plt.show()



"""# ROBERTA PRETRAINED MODEL"""

from transformers import AutoTokenizer
from transformers import AutoModelForSequenceClassification
from scipy.special import softmax

MODEL = f"cardiffnlp/twitter-roberta-base-sentiment"
tokenizer = AutoTokenizer.from_pretrained(MODEL)
model = AutoModelForSequenceClassification.from_pretrained(MODEL)

##Vader Results on Example
print(example)
sia.polarity_scores(example)

"""Run on Roberta Model"""

encoded_text = tokenizer(example, return_tensors="pt")
output = model(**encoded_text)
scores = output[0][0].detach().numpy()
scores = softmax(scores)
scores_dict = {
    'roberta_neg': scores[0],
    'roberta_neu': scores[1],
    'roberta_pos': scores[1],
}
print(scores_dict)

def polarity_scores_roberta(example):
  encoded_text = tokenizer(example, return_tensors="pt")
  output = model(**encoded_text)
  scores = output[0][0].detach().numpy()
  scores = softmax(scores)
  scores_dict = {
      'roberta_neg': scores[0],
      'roberta_neu': scores[1],
      'roberta_pos': scores[1],
  }
  return scores_dict

res = {}
for i, row in tqdm(df.iterrows(), total=len(df)):
  try:
    text = row["Text"]
    myid = row["Id"]
    vader_result = sia.polarity_scores(text)
    vader_result_rename={}
    for key, value in vader_result.items():
      vader_result_rename[f"vader_{key}"] = value


    roberta_result = polarity_scores_roberta(text)
    both = {**vader_result_rename, **roberta_result}

    res[myid] = both
  except RuntimeError:
    print(f'Broke for ID {myid}')

results_df = pd.DataFrame(res).T
results_df = results_df.reset_index().rename(columns={'index': 'Id'})
results_df = results_df.merge(df, how='left')
results_df.head()

"""## Compare Scores between Vader and Roberta Model"""

results_df.columns

sns.pairplot(data=results_df, vars = ['vader_neg', 'vader_neu', 'vader_pos',
       'roberta_neg', 'roberta_neu', 'roberta_pos'],
             hue = 'Score',
             palette = 'tab10')
plt.show()



"""##Checking on Examples to See If The model provides what we expect"""

results_df.query('Score == 1').sort_values('roberta_pos', ascending=False)['Text'].values[0]

results_df.query('Score == 1').sort_values('vader_pos', ascending=False)['Text'].values[0]

#Negative 5* Review
results_df.query('Score == 5').sort_values('roberta_neg', ascending=False)['Text'].values[0]

results_df.query('Score == 5').sort_values('vader_neg', ascending=False)['Text'].values[0]

"""## The Transformer Pipeline"""

from transformers import pipeline

sent_pipeline = pipeline('sentiment-analysis')

sent_pipeline("what the fuck")

sent_pipeline("I have purchased same product before. First one was great, so was the second and a couple more. I cannot tell what you did to this one. Kindly check it!!")